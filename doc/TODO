Should probably put (assert #F) at points where child processes should never
continue to.

Investigate changing chunk allocation to zero all fields of the chunk, because
chunk-create zeros them, so want everything to be consistent with this (i.e. not
have lower-level things having old dead data in chunks that weren't allocated
with chunk-create).

Investigate redesigning stream-get to take an arg that says whether it should
allocate a new chunk to put in the waiters.  This way the stream-get
instruction/operation doesn't have to pre-allocate even if not needed.  The
processor doing the inst/op can safely mutate the chunk, to make it a task
chunk, because no other processors can possibly have access to it (like
chunk-create inst/op).  Only do this if the failure cases are safe, i.e. nothing
is left inconsistent or lost, included for corner cases like emulator-stop in
progress.

Investigate redesigning default initial refcounts to be 0 not 1.  I suspect this
will simplify the emulator be removing all the spots where the allocation-given
refcount of 1 has to be taken into account and the refcount not incremented
again.  My reason for having default initial of 1 was so that chunks are always
discernable as allocated, which is important for when a magic pointer refers to
a chunk, and could be important for future things that analyze the state of a
storage file.  If do this, must be careful that a decrement does not happen
before the refcount is set to at least 1.  Also, if do this, probably should add
new metadata flag that indicates whether a chunk is allocated, for above reasons
for wanting to be able to discern this.

Rename set-multiple-immediates to something better.  Maybe
set-immediate-following.

Investigate improving debug logging of processor operations.  Would be nice to
see values of registers (as fields) - requires knowing what operands are
register code and what ones aren't.  Nice to have log of things like calls to
activate, activate-ready-task, etc.

Make tests that do the corner cases, so these tests can be used for regression
testing in the future.

Investigate if it's possible for a chunk to be freed by a processor while
another processor still intends to use it.  E.g. processor A decides to use a
chunk, then processor B decrements its refcount to 0 which frees it, then
processor A tries to increment its refcount but it's too late and this causes
corruption.  Could this ever happen?  Maybe it can't, because in order for a
processor to know of a chunk's ID, it must already have an
accounted-for-reference to some chunk that (transitively?) has an
accounted-for-reference to the ID, and thus the chunk will have a positive
refcount.  But is it guaranteed that the some other chunk will always be
referenced long enough to establish the new accounted-for-reference to the
chunk?

Add register-setting instructions/operations that designate the register with a
register group (i.e. any register in the group) and an index in that group.
E.g.: (copy group7 4 r35).  This will allow loops that work on consecutive chunk
fields to use a loop index variable to refer to the registers.  Otherwise such
loops will have to be unrolled so that the required registers can be specified.

Need to carefully analyze reference counting to prove it all correct.

It is possible to create a reference cycle by putting in a stream a chunk
that references one of the stream's handles:
  chunk -> handle -> stream -> elements -> chunk
This could prevent all chunks in the cycle from being freed, even if there are
no outside references to any of them, if the chunk is put in the stream and then
the last outside reference to the stream is cleared.  I think this can't be
prevented.  This is only a problem if it's desired to lose all references to a
stream even if there are elements in it, which seems uncommon, however this is
very reasonable to expect to be able to do.  Not sure what to do about this...
-- "To guarantee that a cycle cannot be created, the stream chunk is marked as
being of a special stream type, and can only be referenced by the "next"
reference in another chunk of stream type. This sort of mechanism is similar to
that of "incremental arrays"".
-- Not sure what this means exactly nor how you're supposed to use streams if
they can't be referenced by non-streams.


Need to be careful about deadlocking the SMS or a processor because of
message-queue operations blocking.  What if the SMS replies to a processor but
the processor's message queue is full - the SMS will block until the processor
removes a message, unless the MQs are made non-blocking.  But non-blocking MQs
requires buffering unsent messages and coordinating/scheduling retrying to send
unsent messages - very different than real hardware.  Is it possible to make
this dataflow system, via communication with MQs, determinate such that deadlock
is impossible?  I think I'll wait until I have an initial system running, to see
how these issues might happen.

I suspect that the SMS process should have a higher host-OS scheduling priority
than the processor processes, so it can keep up with the amount of requests.

Does an Interprocessor Network need to exist, so the processors can communicate
things such as supplying a join result to an activity on another processor?  If
so, I suppose it should use Posix message queues.

Should chunk access be through the storage controller?  Currently, it's via
direct (foreign) memory access of the mmap'ed file.  Doing it through the
controller is more like the actual FB design, which might be beneficial for
future changes of the emulator.

Document about how the processor processes access chunks' mmap'ed memory
directly, after a chunk is allocated, but all other operations on chunks
(allocation, reference count changes, deallocation, stream operations) must be
done through the storage controller process.  It's safe under concurrency
because a newly-allocated chunk can only be accessed by one processor because
only that processor can possibly have a reference to it.  Even with the
unimplemented design of unsealed chunks, per the Fresh Breeze papers, it's safe
becasue unsealsed chunks can't be shared.  The other operations require
serialization of the operations to be safe under concurrency.

Explore making "random-access lists", the tree-based list representation of
Okasaki with O(log) random-access and O(1) car, cdr, and cons.  See that SRFI.
Such a representation might work great with chunks, maybe even further optimized
for them, and would provide the basis for implementing Lisp languages.

I think the storage file format currently is endianness-specific and so is not
portable to different endianness machines.  Otherwise, I believe the storage
file format is portable, and sharing storage files seems very desirable, so I
should decide how to make the storage file format portable.
